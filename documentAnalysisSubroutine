#!/usr/bin/env python3
"""
NTARI Document Analysis Daemon - Enhanced Compliance Framework
Network Theory Applied Research Institute, Inc.

Hierarchical compliance analysis for organizational documents with priority-based
regulatory compliance checking from Constitutional law down to local ordinances.

Version: 2.0
Updated: December 2024
License: GNU GPL v3
"""

import re
import json
import logging
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ComplianceTier(Enum):
    """Compliance hierarchy levels"""
    CONSTITUTIONAL = 1
    FEDERAL_CIVIL_RIGHTS = 2
    IRS_501C3 = 3
    STATE_LAW = 4
    LOCAL_ORDINANCES = 5

class SeverityLevel(Enum):
    """Issue severity levels"""
    CRITICAL = "critical"      # Tier 1-2 violations
    HIGH = "high"             # Tier 3 violations
    MEDIUM = "medium"         # Tier 4 violations
    LOW = "low"               # Tier 5 violations
    ADVISORY = "advisory"     # Best practices

@dataclass
class ComplianceIssue:
    """Represents a compliance issue found in document analysis"""
    tier: ComplianceTier
    severity: SeverityLevel
    issue_type: str
    description: str
    recommendation: str
    document_section: str = ""
    line_number: Optional[int] = None
    confidence: float = 1.0

@dataclass
class DocumentAnalysisResult:
    """Complete analysis result for a document"""
    document_name: str
    document_type: str
    analysis_timestamp: datetime
    compliance_issues: List[ComplianceIssue]
    compliance_score: float
    recommendations: List[str]
    requires_legal_review: bool

class CompliancePatterns:
    """Pattern definitions for compliance checking"""
    
    # Tier 1: Constitutional & Civil Rights
    FIRST_AMENDMENT_VIOLATIONS = [
        r"prohibit.*speech",
        r"ban.*expression", 
        r"restrict.*religion",
        r"mandatory.*political.*views",
        r"compelled.*speech",
        r"exclude.*based.*on.*viewpoint"
    ]
    
    FIRST_AMENDMENT_PROTECTIONS = [
        r"freedom.*expression",
        r"diverse.*viewpoints", 
        r"voluntary.*participation",
        r"respectful.*discourse"
    ]
    
    DUE_PROCESS_VIOLATIONS = [
        r"immediate.*termination.*without.*cause",
        r"no.*appeal.*process",
        r"arbitrary.*decisions",
        r"punishment.*without.*hearing"
    ]
    
    DUE_PROCESS_PROTECTIONS = [
        r"notice.*requirements",
        r"hearing.*opportunity",
        r"appeal.*process",
        r"fair.*procedure",
        r"written.*notice"
    ]
    
    # Tier 2: Federal Civil Rights & Labor Law
    ADA_VIOLATIONS = [
        r"no.*accommodation.*provided",
        r"disabled.*persons.*excluded",
        r"accessibility.*not.*required"
    ]
    
    ADA_COMPLIANCE = [
        r"reasonable.*accommodation",
        r"accessible.*format",
        r"disability.*access",
        r"auxiliary.*aids",
        r"effective.*communication"
    ]
    
    EMPLOYMENT_LAW_VIOLATIONS = [
        r"discriminate.*based.*on.*race",
        r"exclude.*based.*on.*gender",
        r"preference.*for.*[protected_class]",
        r"no.*equal.*opportunity"
    ]
    
    EMPLOYMENT_LAW_COMPLIANCE = [
        r"equal.*opportunity",
        r"harassment.*prevention",
        r"reasonable.*accommodation",
        r"family.*leave",
        r"non.*discrimination"
    ]
    
    # Tier 3: 501(c)(3) Requirements
    EXEMPT_PURPOSES = [
        r"charitable",
        r"educational", 
        r"scientific",
        r"religious",
        r"literary",
        r"testing.*public.*safety",
        r"amateur.*sports",
        r"prevention.*cruelty"
    ]
    
    PRIVATE_BENEFIT_VIOLATIONS = [
        r"private.*shareholder.*benefit",
        r"individual.*enrichment",
        r"excessive.*compensation",
        r"personal.*benefit",
        r"inures.*to.*benefit.*of.*individual"
    ]
    
    POLITICAL_ACTIVITY_VIOLATIONS = [
        r"endorse.*candidate",
        r"campaign.*contribution",
        r"political.*campaign.*activity",
        r"partisan.*politics"
    ]
    
    POLITICAL_ACTIVITY_ALLOWED = [
        r"issue.*advocacy",
        r"public.*education",
        r"policy.*research",
        r"voter.*education"
    ]
    
    # Tier 4: Kentucky State Law
    KENTUCKY_NONPROFIT_REQUIREMENTS = [
        r"registered.*agent",
        r"principal.*office",
        r"annual.*report",
        r"articles.*incorporation",
        r"board.*directors"
    ]
    
    # Tier 5: Local Compliance
    LOCAL_REQUIREMENTS = [
        r"business.*license",
        r"zoning.*compliance",
        r"occupancy.*permit"
    ]

class NTARISpecificCompliance:
    """NTARI-specific compliance patterns based on organizational documents"""
    
    PRIVACY_POLICY_REQUIREMENTS = [
        r"data.*minimization",
        r"user.*sovereignty", 
        r"purpose.*limitation",
        r"privacy.*by.*design",
        r"user.*rights",
        r"transparent.*operations"
    ]
    
    PROGRAM_CHARTER_REQUIREMENTS = [
        r"board.*oversight",
        r"program.*director.*authority",
        r"quarterly.*reporting", 
        r"charter.*approval",
        r"mission.*alignment"
    ]
    
    EDUCATIONAL_MISSION_REQUIREMENTS = [
        r"educational.*purpose",
        r"public.*benefit",
        r"scientific.*research", 
        r"community.*education",
        r"knowledge.*sharing",
        r"cooperative.*principles"
    ]

class DocumentAnalysisDaemon:
    """Main document analysis engine with hierarchical compliance checking"""
    
    def __init__(self):
        self.patterns = CompliancePatterns()
        self.ntari_patterns = NTARISpecificCompliance()
        self.analysis_history = []
        
    def analyze_document(self, document_text: str, document_name: str, 
                        document_type: str = "unknown") -> DocumentAnalysisResult:
        """
        Analyze document for compliance issues across all tiers
        
        Args:
            document_text: Full text of document to analyze
            document_name: Name/identifier of document
            document_type: Type of document (bylaws, charter, policy, etc.)
            
        Returns:
            DocumentAnalysisResult with complete compliance analysis
        """
        logger.info(f"Starting analysis of {document_name} (type: {document_type})")
        
        issues = []
        
        # Run compliance checks in hierarchy order
        issues.extend(self._check_constitutional_compliance(document_text, document_type))
        issues.extend(self._check_federal_civil_rights(document_text, document_type))
        issues.extend(self._check_501c3_compliance(document_text, document_type))
        issues.extend(self._check_state_compliance(document_text, document_type))
        issues.extend(self._check_local_compliance(document_text, document_type))
        issues.extend(self._check_ntari_specific_compliance(document_text, document_type))
        
        # Calculate compliance score
        compliance_score = self._calculate_compliance_score(issues)
        
        # Generate recommendations
        recommendations = self._generate_recommendations(issues, document_type)
        
        # Determine if legal review is required
        requires_legal_review = any(issue.severity in [SeverityLevel.CRITICAL, SeverityLevel.HIGH] 
                                  for issue in issues)
        
        result = DocumentAnalysisResult(
            document_name=document_name,
            document_type=document_type,
            analysis_timestamp=datetime.now(),
            compliance_issues=issues,
            compliance_score=compliance_score,
            recommendations=recommendations,
            requires_legal_review=requires_legal_review
        )
        
        self.analysis_history.append(result)
        logger.info(f"Analysis complete. Found {len(issues)} issues. Score: {compliance_score:.2f}")
        
        return result
    
    def _check_constitutional_compliance(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check Tier 1: Constitutional & Civil Rights compliance"""
        issues = []
        
        # First Amendment violations
        for pattern in self.patterns.FIRST_AMENDMENT_VIOLATIONS:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.CONSTITUTIONAL,
                    severity=SeverityLevel.CRITICAL,
                    issue_type="first_amendment_violation",
                    description=f"Potential First Amendment violation: {match.group()}",
                    recommendation="Remove language that restricts speech, expression, or religious freedom",
                    document_section=self._get_section_context(text, match.start())
                ))
        
        # Due Process violations
        for pattern in self.patterns.DUE_PROCESS_VIOLATIONS:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.CONSTITUTIONAL,
                    severity=SeverityLevel.CRITICAL,
                    issue_type="due_process_violation",
                    description=f"Due process concern: {match.group()}",
                    recommendation="Ensure fair procedures with notice and hearing rights",
                    document_section=self._get_section_context(text, match.start())
                ))
        
        return issues
    
    def _check_federal_civil_rights(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check Tier 2: Federal Civil Rights & Labor Law compliance"""
        issues = []
        
        # ADA compliance check
        ada_compliance_found = any(re.search(pattern, text, re.IGNORECASE) 
                                 for pattern in self.patterns.ADA_COMPLIANCE)
        
        if doc_type in ["policy", "bylaws", "charter"] and not ada_compliance_found:
            issues.append(ComplianceIssue(
                tier=ComplianceTier.FEDERAL_CIVIL_RIGHTS,
                severity=SeverityLevel.CRITICAL,
                issue_type="ada_compliance_missing",
                description="No ADA compliance language found in policy document",
                recommendation="Add reasonable accommodation and accessibility provisions"
            ))
        
        # Employment law violations
        for pattern in self.patterns.EMPLOYMENT_LAW_VIOLATIONS:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.FEDERAL_CIVIL_RIGHTS,
                    severity=SeverityLevel.CRITICAL,
                    issue_type="employment_discrimination",
                    description=f"Potential employment discrimination: {match.group()}",
                    recommendation="Remove discriminatory language and ensure equal opportunity",
                    document_section=self._get_section_context(text, match.start())
                ))
        
        return issues
    
    def _check_501c3_compliance(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check Tier 3: IRS 501(c)(3) compliance"""
        issues = []
        
        # Check exempt purpose language
        if doc_type in ["bylaws", "charter", "mission", "articles"]:
            exempt_purpose_found = any(re.search(pattern, text, re.IGNORECASE) 
                                     for pattern in self.patterns.EXEMPT_PURPOSES)
            
            if not exempt_purpose_found:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.IRS_501C3,
                    severity=SeverityLevel.HIGH,
                    issue_type="exempt_purpose_missing",
                    description="No clear exempt purpose language found",
                    recommendation="Add explicit charitable, educational, or scientific purpose statement"
                ))
        
        # Private benefit violations
        for pattern in self.patterns.PRIVATE_BENEFIT_VIOLATIONS:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.IRS_501C3,
                    severity=SeverityLevel.HIGH,
                    issue_type="private_benefit_violation",
                    description=f"Private benefit concern: {match.group()}",
                    recommendation="Ensure no part of net earnings inures to private benefit",
                    document_section=self._get_section_context(text, match.start())
                ))
        
        # Political activity violations
        for pattern in self.patterns.POLITICAL_ACTIVITY_VIOLATIONS:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                issues.append(ComplianceIssue(
                    tier=ComplianceTier.IRS_501C3,
                    severity=SeverityLevel.HIGH,
                    issue_type="political_activity_violation",
                    description=f"Political activity concern: {match.group()}",
                    recommendation="Ensure compliance with 501(c)(3) political activity limitations",
                    document_section=self._get_section_context(text, match.start())
                ))
        
        # Check for required governance elements
        if doc_type == "bylaws":
            required_governance = [
                (r"board.*directors", "Board of directors structure"),
                (r"conflict.*interest", "Conflict of interest policy"), 
                (r"annual.*meeting", "Annual meeting requirements"),
                (r"financial.*oversight", "Financial oversight procedures")
            ]
            
            for pattern, description in required_governance:
                if not re.search(pattern, text, re.IGNORECASE):
                    issues.append(ComplianceIssue(
                        tier=ComplianceTier.IRS_501C3,
                        severity=SeverityLevel.MEDIUM,
                        issue_type="governance_requirement_missing",
                        description=f"Missing governance requirement: {description}",
                        recommendation=f"Add {description.lower()} to bylaws"
                    ))
        
        return issues
    
    def _check_state_compliance(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check Tier 4: Kentucky State Law compliance"""
        issues = []
        
        if doc_type in ["bylaws", "articles"]:
            for pattern in self.patterns.KENTUCKY_NONPROFIT_REQUIREMENTS:
                if not re.search(pattern, text, re.IGNORECASE):
                    issues.append(ComplianceIssue(
                        tier=ComplianceTier.STATE_LAW,
                        severity=SeverityLevel.MEDIUM,
                        issue_type="kentucky_requirement_missing",
                        description=f"Kentucky nonprofit requirement may be missing: {pattern}",
                        recommendation="Verify compliance with Kentucky Nonprofit Corporation Act"
                    ))
        
        return issues
    
    def _check_local_compliance(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check Tier 5: Local ordinance compliance"""
        issues = []
        
        # Local compliance checks are typically operational rather than document-based
        # This section can be expanded based on specific Louisville/Jefferson County requirements
        
        return issues
    
    def _check_ntari_specific_compliance(self, text: str, doc_type: str) -> List[ComplianceIssue]:
        """Check NTARI-specific compliance requirements"""
        issues = []
        
        # Privacy policy alignment check
        if doc_type == "policy" and "privacy" in text.lower():
            for pattern in self.ntari_patterns.PRIVACY_POLICY_REQUIREMENTS:
                if not re.search(pattern, text, re.IGNORECASE):
                    issues.append(ComplianceIssue(
                        tier=ComplianceTier.IRS_501C3,  # Treat as organizational requirement
                        severity=SeverityLevel.MEDIUM,
                        issue_type="ntari_privacy_requirement",
                        description=f"NTARI privacy requirement missing: {pattern}",
                        recommendation="Ensure alignment with Article IX privacy standards"
                    ))
        
        # Program charter compliance
        if doc_type == "charter":
            for pattern in self.ntari_patterns.PROGRAM_CHARTER_REQUIREMENTS:
                if not re.search(pattern, text, re.IGNORECASE):
                    issues.append(ComplianceIssue(
                        tier=ComplianceTier.IRS_501C3,
                        severity=SeverityLevel.MEDIUM,
                        issue_type="ntari_charter_requirement",
                        description=f"NTARI charter requirement missing: {pattern}",
                        recommendation="Ensure compliance with NTARI governance framework"
                    ))
        
        # Educational mission alignment
        educational_mission_found = any(re.search(pattern, text, re.IGNORECASE) 
                                       for pattern in self.ntari_patterns.EDUCATIONAL_MISSION_REQUIREMENTS)
        
        if doc_type in ["charter", "program", "policy"] and not educational_mission_found:
            issues.append(ComplianceIssue(
                tier=ComplianceTier.IRS_501C3,
                severity=SeverityLevel.MEDIUM,
                issue_type="educational_mission_alignment",
                description="Educational mission alignment unclear",
                recommendation="Clarify connection to NTARI's 501(c)(3) educational purposes"
            ))
        
        return issues
    
    def _get_section_context(self, text: str, position: int, context_chars: int = 100) -> str:
        """Extract context around a specific position in text"""
        start = max(0, position - context_chars)
        end = min(len(text), position + context_chars)
        return text[start:end].strip()
    
    def _calculate_compliance_score(self, issues: List[ComplianceIssue]) -> float:
        """Calculate overall compliance score (0-100)"""
        if not issues:
            return 100.0
        
        # Weight penalties by severity
        penalty_weights = {
            SeverityLevel.CRITICAL: 25,
            SeverityLevel.HIGH: 15,
            SeverityLevel.MEDIUM: 8,
            SeverityLevel.LOW: 3,
            SeverityLevel.ADVISORY: 1
        }
        
        total_penalty = sum(penalty_weights.get(issue.severity, 0) for issue in issues)
        
        # Cap at reasonable maximum penalty
        max_penalty = 100
        actual_penalty = min(total_penalty, max_penalty)
        
        return max(0.0, 100.0 - actual_penalty)
    
    def _generate_recommendations(self, issues: List[ComplianceIssue], doc_type: str) -> List[str]:
        """Generate prioritized recommendations based on issues found"""
        recommendations = []
        
        # Group issues by tier and severity
        critical_issues = [i for i in issues if i.severity == SeverityLevel.CRITICAL]
        high_issues = [i for i in issues if i.severity == SeverityLevel.HIGH]
        
        if critical_issues:
            recommendations.append("IMMEDIATE ACTION REQUIRED: Address critical constitutional/civil rights issues")
            for issue in critical_issues[:3]:  # Top 3 critical issues
                recommendations.append(f"- {issue.recommendation}")
        
        if high_issues:
            recommendations.append("HIGH PRIORITY: Address 501(c)(3) compliance issues")
            for issue in high_issues[:3]:  # Top 3 high priority issues
                recommendations.append(f"- {issue.recommendation}")
        
        # Document-type specific recommendations
        if doc_type == "bylaws":
            recommendations.append("Consider legal review of bylaws for compliance verification")
        elif doc_type == "charter":
            recommendations.append("Ensure charter alignment with organizational bylaws")
        elif doc_type == "policy":
            recommendations.append("Review policy against current best practices")
        
        return recommendations
    
    def generate_compliance_report(self, result: DocumentAnalysisResult) -> Dict[str, Any]:
        """Generate comprehensive compliance report"""
        report = {
            "document_analysis": {
                "name": result.document_name,
                "type": result.document_type,
                "analysis_date": result.analysis_timestamp.isoformat(),
                "compliance_score": result.compliance_score,
                "requires_legal_review": result.requires_legal_review
            },
            "compliance_summary": {
                "total_issues": len(result.compliance_issues),
                "critical_issues": len([i for i in result.compliance_issues if i.severity == SeverityLevel.CRITICAL]),
                "high_priority_issues": len([i for i in result.compliance_issues if i.severity == SeverityLevel.HIGH]),
                "medium_priority_issues": len([i for i in result.compliance_issues if i.severity == SeverityLevel.MEDIUM]),
                "low_priority_issues": len([i for i in result.compliance_issues if i.severity == SeverityLevel.LOW])
            },
            "issues_by_tier": {
                "constitutional": len([i for i in result.compliance_issues if i.tier == ComplianceTier.CONSTITUTIONAL]),
                "federal_civil_rights": len([i for i in result.compliance_issues if i.tier == ComplianceTier.FEDERAL_CIVIL_RIGHTS]),
                "irs_501c3": len([i for i in result.compliance_issues if i.tier == ComplianceTier.IRS_501C3]),
                "state_law": len([i for i in result.compliance_issues if i.tier == ComplianceTier.STATE_LAW]),
                "local_ordinances": len([i for i in result.compliance_issues if i.tier == ComplianceTier.LOCAL_ORDINANCES])
            },
            "detailed_issues": [
                {
                    "tier": issue.tier.name,
                    "severity": issue.severity.value,
                    "type": issue.issue_type,
                    "description": issue.description,
                    "recommendation": issue.recommendation,
                    "section": issue.document_section,
                    "confidence": issue.confidence
                }
                for issue in result.compliance_issues
            ],
            "recommendations": result.recommendations
        }
        
        return report
    
    def export_analysis_results(self, results: List[DocumentAnalysisResult], 
                               format: str = "json") -> str:
        """Export analysis results in specified format"""
        if format.lower() == "json":
            export_data = {
                "analysis_summary": {
                    "total_documents": len(results),
                    "analysis_date": datetime.now().isoformat(),
                    "analyzer_version": "2.0"
                },
                "document_results": [
                    self.generate_compliance_report(result) for result in results
                ]
            }
            return json.dumps(export_data, indent=2)
        else:
            raise ValueError(f"Export format '{format}' not supported")

# Convenience functions for integration
def analyze_single_document(document_text: str, document_name: str, 
                           document_type: str = "unknown") -> DocumentAnalysisResult:
    """Convenience function for single document analysis"""
    daemon = DocumentAnalysisDaemon()
    return daemon.analyze_document(document_text, document_name, document_type)

def batch_analyze_documents(documents: List[Tuple[str, str, str]]) -> List[DocumentAnalysisResult]:
    """Convenience function for batch document analysis"""
    daemon = DocumentAnalysisDaemon()
    results = []
    
    for doc_text, doc_name, doc_type in documents:
        result = daemon.analyze_document(doc_text, doc_name, doc_type)
        results.append(result)
    
    return results

# Example usage and testing
if __name__ == "__main__":
    # Example document analysis
    sample_bylaws = """
    ARTICLE I: MISSION AND PURPOSES
    
    The organization is organized exclusively for charitable and educational purposes
    under Section 501(c)(3) of the Internal Revenue Code. The organization develops
    systems and protocols for online global cooperatives.
    
    ARTICLE II: BOARD OF DIRECTORS
    
    The Board shall consist of five elected positions with two-year terms.
    All board decisions require majority vote.
    
    ARTICLE III: CONFLICT OF INTEREST
    
    Board members must disclose potential conflicts and recuse themselves from
    related discussions and votes.
    """
    
    # Run analysis
    daemon = DocumentAnalysisDaemon()
    result = daemon.analyze_document(sample_bylaws, "Sample Bylaws", "bylaws")
    
    # Generate report
    report = daemon.generate_compliance_report(result)
    print(json.dumps(report, indent=2))
    
    print(f"\nCompliance Score: {result.compliance_score:.2f}")
    print(f"Legal Review Required: {result.requires_legal_review}")
    print(f"Issues Found: {len(result.compliance_issues)}")
